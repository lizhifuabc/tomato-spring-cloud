spring:
  shardingsphere:
    # Proxy 属性 配置
    props:
      sql-show: true # 开启sql日志打印
    mode:
      type: Memory # 内存模式，无需持久化
    datasource:
      names: tomato_order_00,tomato_order_01 # 配置库的名字
      tomato_order_01:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/tomato_order_01?zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true
        username: tomato
        password: tomato
      tomato_order_00:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/tomato_order_00?zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true
        username: tomato
        password: tomato
    rules:
      sharding:
#        default-data-source-name: tomato_order_00 # 未配置分片规则的表将通过默认数据源定位，5.X 废弃,第一个数据源为默认数据源
        sharding-algorithms:
          t-order-algorithm: # 算法名称
            type: CLASS_BASED # 自定义类分片算法
            props:
              strategy: complex
              algorithmClassName: com.tomato.order.algorithm.CustomShardingAlgorithm
              sharding-count: 2 # 分片数量
        tables: # 数据分片规则配置
          order_info: # 逻辑表名称
            database-strategy: # 分库策略
              complex:
                sharding-columns: merchant_no,order_no # 分片字段
                sharding-algorithm-name: t-order-algorithm
          pay_info: # 逻辑表名称
            database-strategy: # 分库策略
              complex:
                sharding-columns: pay_no,order_no # 分片字段
                sharding-algorithm-name: t-order-algorithm
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://127.0.0.1:3306/tomato_order?zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true
#    username: tomato
#    password: tomato
  rabbitmq:
    host: 127.0.0.1  # 设置RabbitMQ所在主机
    port: 5672       # 设置RabbitMQ服务端口
    username: guest  # 设置RabbitMQ用户名
    password: guest  # 设置RabbitMQ密码
    # 如果没有抵达队列,以异步发送优先回调returns确认
    publisher-confirms: true # 消息成功确认
    publisher-returns: true # 消息失败确认
    template:
      mandatory: true
    publisher-confirm-type: simple

    # 动态创建和绑定队列、交换机的配置
    rabbitInfoList:
      - queue:
          name: order.callback.account.queue
          dead-letter-exchange: order.dead.exchange
          dead-letter-routing-key: order.dead.account.routing.key
        exchange:
          name: order.callback.exchange
          type: FANOUT
      - routing-key: order.callback.notice.routing.key
        queue:
          name: order.callback.notice.queue
        exchange:
          name: order.callback.notice.exchange
          type: DIRECT
      ## 延迟队列配置
      - routing-key: order.delay.routing.key
        queue:
          name: order.delay.queue
        exchange:
          name: order.delay.exchange
          type: DELAYED
          arguments:
            x-delayed-type: topic
mybatis:
  type-aliases-package: com.tomato.order.database.dataobject
  mapper-locations: classpath:mapper/*Mapper.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
#    org.springframework.boot.autoconfigure: DEBUG